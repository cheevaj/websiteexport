// async getData() {
//       this.showgraph = false;
//       this.loading = true
//       try {
//         const startDate = this.date
//         const endDate = this.dates
//         const res = await this.$axios.$get(
//           `http://172.28.26.23:3000/ticket?startDate=${encodeURIComponent(
//             startDate
//           )}&endDate=${encodeURIComponent(endDate)}`
//         )
//         // --------- loop data in lastindex of Object in group ID
//         const lastIndexes = {}
//         const firstIndexes = {}
//         const resolvebyIndex = {}
//         const indateIndex = {}
//         const inownerIndex = {}
//         // index of last - 3 in ticket ID similar
//         for (let i = res.length - 1; i >= 0; i--) {
//           const currentTicketID = res[i].TICKETID
//           if (typeof inownerIndex[currentTicketID] === 'undefined') {
//             inownerIndex[currentTicketID] = i - 3
//           }
//         }
//         // index of last in ticket ID similar
//         for (let i = res.length - 1; i >= 0; i--) {
//           const currentTicketID = res[i].TICKETID

//           if (typeof lastIndexes[currentTicketID] === 'undefined') {
//             lastIndexes[currentTicketID] = i
//           }
//         }
//         // index of last - 2 in ticket ID similar
//         for (let i = res.length - 1; i >= 0; i--) {
//           const currentTicketID = res[i].TICKETID

//           if (typeof indateIndex[currentTicketID] === 'undefined') {
//             indateIndex[currentTicketID] = i - 2
//           }
//         }
//         // index of last - 1 in ticket ID similar
//         for (let i = res.length - 1; i >= 0; i--) {
//           const currentTicketID = res[i].TICKETID

//           if (typeof resolvebyIndex[currentTicketID] === 'undefined') {
//             resolvebyIndex[currentTicketID] = i - 1
//           }
//         }
//         // index of fist index in ticket ID similar
//         for (let i = 0; i < res.length; i++) {
//           const currentTicketID = res[i].TICKETID
//           if (typeof firstIndexes[currentTicketID] === 'undefined') {
//             firstIndexes[currentTicketID] = i
//           }
//         }
//         // --------- last  data in lastindex of Object in group ID
//         const desserts = Object.values(firstIndexes).map((firstIndex) => {
//           // ---------------- fech data in desserts
//           const firstItem = res[firstIndex];
//             const lastItemIndex = lastIndexes[firstItem.TICKETID];
//             const lastItem = res[lastItemIndex];
//             const resolveItemIndex = resolvebyIndex[firstItem.TICKETID];
//             const resolveItem = resolveItemIndex !== undefined ? res[resolveItemIndex] : null;
//             const inprogressItemIndex = indateIndex[firstItem.TICKETID];
//             const inprogressItem = inprogressItemIndex !== undefined ? res[inprogressItemIndex] : null;
//             const inownerItemIndex = inownerIndex[firstItem.TICKETID];
//             const inownerItem = inownerItemIndex !== undefined ? res[inownerItemIndex] : null;

//           function convertToISOFormat(dateString) {
//             if (!dateString) {
//               return null // or handle the case where dateString is undefined
//             }
//             const dateParts = dateString.split(' ')

//             if (dateParts.length !== 2) {
//               return null // or handle the case where the expected format is not found
//             }
//             const [day, month, year] = dateParts[0].split('-')
//             const [hours, minutes, seconds] = dateParts[1].split(':')

//             return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`
//           }
//           const inprogressItemQUEUEDOWNER = inprogressItem && inprogressItem.QUEUED_OWNER ? inprogressItem.QUEUED_OWNER : '';
//           const inownerItemQUEUEDOWNER = inownerItem && inownerItem.QUEUED_OWNER ? inownerItem.QUEUED_OWNER : '';
//           const inownerItemINPROGRESSCHANGEBY = inownerItem && inownerItem.INPROGRESS_CHANGEBY ? inownerItem.INPROGRESS_CHANGEBY : '';
//           const inprogressItemINPROGRESSCHANGEBY = inprogressItem && inprogressItem.INPROGRESS_CHANGEBY ? inprogressItem.INPROGRESS_CHANGEBY : '';
          
//           // Ensure QUEUED_DATE exists before trying to access it
//           const date1 = inprogressItem && inprogressItem.QUEUED_DATE ? new Date(convertToISOFormat(inprogressItem.QUEUED_DATE)) : null;
//           const date2 = firstItem && firstItem.QUEUED_DATE ? new Date(convertToISOFormat(firstItem.QUEUED_DATE)) : null;
//           const date3 = resolveItem && resolveItem.QUEUED_DATE ? new Date(convertToISOFormat(resolveItem.QUEUED_DATE)) : null;
//           const date4 = lastItem && lastItem.QUEUED_DATE ? new Date(convertToISOFormat(lastItem.QUEUED_DATE)) : null;
//           // Ensure all dates exist before performing calculations
//           const timecare = date1 - date2;
//           const hours = Math.floor(timecare / (1000 * 60 * 60));
//           const minutes = Math.floor((timecare % (1000 * 60 * 60)) / (1000 * 60));
//           const timecaretplus = (timecare, hours, minutes);

//           const timedo = date3 - date2;
//           const hoursdo = Math.floor(timedo / (1000 * 60 * 60));
//           const minutesdo = Math.floor((timedo % (1000 * 60 * 60)) / (1000 * 60));
//           const timedotplus = (timedo, hoursdo, minutesdo);
//           const timecenter = date4 - date3;
//           const hourscenter = Math.floor(timecenter / (1000 * 60 * 60));
//           const minutescenter = Math.floor((timecenter % (1000 * 60 * 60)) / (1000 * 60));
//           const timecolsebycenter = (timecenter, hourscenter, minutescenter);
//           // change data of table SERVICE_GROUP
//           let service = '';
//           if (firstItem.CLASSIFICATION.startsWith('D')) {
//             service = 'DATA';
//           } else if (firstItem.CLASSIFICATION.startsWith('S')) {
//             service = 'SMS';
//           } else if (firstItem.CLASSIFICATION.startsWith('VA')) {
//             service = 'VAS';
//           } else if (firstItem.CLASSIFICATION.startsWith('V') && firstItem.CLASSIFICATION.substring(1, 2) !== 'A') {
//             service = 'VOICE';
//           } else {
//             service = firstItem.SERVICE_GROUP || '';
//           }
//           const department = this.changeNameroot(this.adjustName(firstItem.FIRST_WORKLOG_DESCRIPTION), 'DP');
//           const rootownwe = this.changeNameroot(this.adjustName(firstItem.FIRST_WORKLOG_DESCRIPTION), 'ON');
//           const tier = this.changeNameroot(this.adjustName(firstItem.FIRST_WORKLOG_DESCRIPTION), 'Ti');
//           const solution = this.changeNameroot(this.adjustName(firstItem.FIRST_WORKLOG_DESCRIPTION), 'SOLU');
//           const rootCause = this.changeNameroot(this.adjustName(firstItem.FIRST_WORKLOG_DESCRIPTION), 'ROOT');
//           //  data in desertes
//           return {
//             TICKETID: firstItem.TICKETID,
//             CLASSIFICATION: firstItem.CLASSIFICATION,
//             MSISDN: firstItem.MSISDN,
//             SERVICE_GROUP: service,
//             COMMODITY: firstItem.COMMODITY,
//             CREATEDBY: firstItem.CREATEDBY,
//             CREATIONDATE: firstItem.CREATIONDATE,
//             QUEUED_DATE: firstItem.QUEUED_DATE,
//             QUEUED_OWNERGROUP: firstItem.OWNERGROUP,
//             INPROGRESS_DATE: inprogressItem.QUEUED_DATE,
//             INPROGRESS_OWNER: inownerItemQUEUEDOWNER, //         QUEUED_OWNER === null
//             INPROGRESS_OWNERGROUP: firstItem.OWNERGROUP,
//             INPROGRESS_CHANGBY: inownerItemINPROGRESSCHANGEBY, //
//             ROOT_CAUSE_DESCRIPTIONS: rootCause, //
//             SOLUTION_SHOT: solution, //
//             ROOT_CAUSE_BY_DEPARTMENT: department, // colsedateValue - resolvedateValue
//             ROOT_CAUSE_BY_STATUS: rootownwe, // colsedateValue - resolvedateValue
//             ROOT_CAUSE_BY_TIER: tier,
//             RESOLVE_DATE: resolveItem.QUEUED_DATE,
//             RESOLVE_OWNER: inprogressItemQUEUEDOWNER, //         QUEUED_OWNER === null
//             RESOLVE_OWNERGROUP: inprogressItem.OWNERGROUP,
//             RESOLVE_CHANGBY: inprogressItemINPROGRESSCHANGEBY, // 
//             TIME_CARE_TPLUS: timecaretplus, // inprogressdateValue - qeuredateValue
//             TIME_DO_TPLUS: timedotplus, // resolvedateValue - qeuredateValue
//             WORKLONG_DESCRIPTOIN: firstItem.FIRST_WORKLOG_DESCRIPTION,
//             MODIFY_DATE: resolveItem.QUEUED_DATE,
//             MODIFYBY: firstItem.FIRST_WORKLOG_MODIFYBY,
//             PROVINCE: firstItem.PROVINCE,
//             DISTRICT: firstItem.DISTRICT,
//             VILLAGE: firstItem.VILLAGE,
//             COMPLAIN_BY: firstItem.COMPLAIN_BY,
//             CLOSE_DATE: lastItem.QUEUED_DATE,
//             CLOSE_BY: lastItem.INPROGRESS_CHANGEBY,
//             STATUS_TICKET: lastItem.STATUS,
//             TIME_CLOSE_BY_CENTER: timecolsebycenter, // colsedateValue - resolvedateValue
//           }
//         })
//         console.log("hhie")
//         this.desserts = desserts
//       } catch (error) {
//         console.error('Error fetching data:', error)
//       }
//       this.loading = false;
//     },