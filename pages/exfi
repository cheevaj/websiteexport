//     getData() {
//     try {
//         // Calculate values based on SERVICE_GROUP CLASSIFICATION DATA
//         if (this.tabledisplay === 'Root Cause') {
//             // const datad1value = this.calculateDataD2Value(this.desserts, 'SMS', 'TP064_');
//             // const datad2value = this.calculateDataD2Value(this.desserts, 'SMS', 'TP034_');
//             // const datad4value = this.calculateDataD2Value(this.desserts, 'SMS', 'TP033_');
//             // const dataothervalue = dataallvalue - (datad1value + datad2value + datad4value);
//             // this.tablename = 'SMS All';
//             // this.tabledataall = dataallvalue;
//             // const dataObjects = [
//             //     { name: 'No SMSMT in HSS', value: datad1value },
//             //     { name: 'Number Was Operational(Sugestion to Setting SMS Center)', value: datad2value },
//             //     { name: '', value: datad4value },
//             //     { name: 'Other', value: dataothervalue }
//             // ];
//             // // Sort the dataObjects array based on the value property in descending order
//             // dataObjects.sort((a, b) => b.value - a.value);
//             // this.names = dataObjects.map(item => item.name);
//             // this.value = dataObjects.map(item => item.value);
//             // const percentages = this.value.map(value => ((value / dataallvalue) * 100).toFixed(2));
//             // this.dataset = this.names.map((item, index) => ({
//             //     name: item,
//             //     value: this.value[index],
//             //     percentage: `${percentages[index]}%`,
//             // }));
//             // this.dataset = this.dataset.filter(item => item.value > 0);
//             this.tablename = 'SMS All';
//             this.tabledataall = dataallvalue;
//             const uniqueNames = this.loopname(this.desserts, 'SMS', 'Root');
//             const dataObjects = uniqueNames.map(name => ({
//                 name,
//                 value: this.calculateDataD2Value(this.desserts, 'SMS', name)
//             }));
//             // Sort the dataObjects array based on the value property in descending order
//             dataObjects.sort((a, b) => b.value - a.value);
//             this.names = dataObjects.map(item => item.name);
//             this.value = dataObjects.map(item => item.value);
//             const percentages = this.value.map(value => ((value / dataallvalue) * 100).toFixed(2));
//             this.dataset = this.names.map((item, index) => ({
//                 name: item,
//                 value: this.value[index],
//                 percentage: `${percentages[index]}%`,
//             }));
//         }
//         if (this.desserts === undefined) {
//             console.error('Response is undefined');
//             throw new Error('Response is undefined');
//         }
//     } catch (error) {
//         console.error('Error fetching data:', error);
//         throw error;
//     }
//     this.graphShow();
//     this.loading = false;
// },
// calculateData(data, serviceGroup, serviceGroupD1) {
//     // Assuming "SERVICE_GROUP" is the key you want to filter on
//     return data.reduce((sum, entry) => {
//         if ((entry.SERVICE_GROUP === serviceGroup) && (entry.CLASSIFICATION === serviceGroupD1)) {
//             return sum + 1;
//         }
//         return sum;
//     }, 0);
// },
// calculateDataD1Value(data, serviceGroup, serviceGroupD1) {
//     // Assuming "SERVICE_GROUP" is the key you want to filter on
//     return data.reduce((sum, entry, index) => {
//         const description = entry.CLASSIFICATION || '';
//         if ((entry.SERVICE_GROUP === serviceGroup) && description.includes(serviceGroupD1)) {
//             return sum + 1;
//         }
//         return sum;
//     }, 0);
// },

// loopname(data, serviceGroup, status) {
//     if (status === 'DATA') {
//         const uniqueNames = new Set();
//         data.forEach((entry) => {
//             if (entry.SERVICE_GROUP === serviceGroup && typeof entry.CLASSIFICATION === 'string') {
//                 // console.log('hu', entry.CLASSIFICATION);
//                 uniqueNames.add(entry.CLASSIFICATION);
//             }
//         });
//         return Array.from(uniqueNames);
//     }
//     else if (status === 'Root') {
//         const uniqueNames = new Set();
//         data.forEach((entry) => {
//             if (entry.SERVICE_GROUP === serviceGroup && typeof entry.WORKLONG_DESCRIPTOIN === 'string') {
//                 // console.log('hu', entry.WORKLONG_DESCRIPTOIN);
//                 uniqueNames.add(entry.WORKLONG_DESCRIPTOIN);
//             }
//         });
//         return Array.from(uniqueNames);
//     }
// };

// <<< if (this.tabledisplay === 'Root Cause') {
//     this.tablename = 'SMS All';
//     this.tabledataall = dataallvalue;
//     const uniqueNames = this.loopname(this.desserts, 'SMS', 'Root');

//     // Create a map to store the counts of names
//     const nameCounts = new Map();

//     uniqueNames.forEach(name => {
//         // Extract the first 5 characters
//         const prefix = name.slice(0, 5);
//         // If the prefix is not in the map, add it with count 1
//         // If it is already in the map, increment the count
//         nameCounts.set(prefix, (nameCounts.get(prefix) || 0) + 1);
//     });

//     // Create dataObjects based on unique names and counts
//     const dataObjects = Array.from(nameCounts.entries()).map(([prefix, count]) => ({
//         name: `${prefix}_DATA`,
//         value: count.toString(),
//     }));

//     // Sort the dataObjects array based on the value property in descending order
//     dataObjects.sort((a, b) => b.value - a.value);

//     this.names = dataObjects.map(item => item.name);
//     this.value = dataObjects.map(item => item.value);
//     const percentages = this.value.map(value => ((value / dataallvalue) * 100).toFixed(2));

//     this.dataset = this.names.map((item, index) => ({
//         name: item,
//         value: this.value[index],
//         percentage: `${percentages[index]}%`,
//     }));
// }
// loopname(data, serviceGroup, status) {
//     if (status === 'DATA') {
//         const uniqueNames = new Set();
//         data.forEach((entry) => {
//             if (entry.SERVICE_GROUP === serviceGroup && typeof entry.CLASSIFICATION === 'string') {
//                 uniqueNames.add(entry.CLASSIFICATION);
//             }
//         });
//         return Array.from(uniqueNames);
//     } else if (status === 'Root') {
//         const uniqueNames = new Set();
//         data.forEach((entry) => {
//             if (entry.SERVICE_GROUP === serviceGroup && typeof entry.WORKLONG_DESCRIPTOIN === 'string') {
//                 uniqueNames.add(entry.WORKLONG_DESCRIPTOIN);
//             }
//         });
//         return Array.from(uniqueNames);
//     }
// },

// String 
// const str = 'TP0164_lopjij';

// for (let i = 0; i < str.length; i++) {
//   const a = str.substring(i, i + 1);

//   if (a === '_') {
//     const id = str.substring(0, i + 1);
//     console.log(id);

//     for (let j = 0; j < id.length; j++) {
//       const t = id.substring(j, j + 1);

//       if (t === '0') {
//         const l = id.substring(0, j) + id.substring( j + 1) ;
//         console.log('i', l);
//       }
//     }
//   }
// }


